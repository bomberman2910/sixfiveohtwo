const std = @import("std");

pub fn disassemble(bytes: []u8) ![]u8 {
    var buffer = [_]u8{' '} ** 11;
    var stream = std.io.fixedBufferStream(&buffer);
    var writer = stream.writer();

    switch (bytes[0]) {
        // 00
        0x00 => try writer.print("BRK", .{}),
        0x01 => try writer.print("ORA (${X:0>2},X)", .{bytes[1]}),
        0x05 => try writer.print("ORA ${X:0>2}", .{bytes[1]}),
        0x06 => try writer.print("ASL ${X:0>2}", .{bytes[1]}),
        0x08 => try writer.print("PHP", .{}),
        0x09 => try writer.print("ORA #${X:0>2}", .{bytes[1]}),
        0x0A => try writer.print("ASL A", .{}),
        0x0D => try writer.print("ORA ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x0E => try writer.print("ASL ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // 10
        0x10 => try writer.print("BPL ${X:0>2}", .{bytes[1]}),
        0x11 => try writer.print("ORA (${X:0>2}),Y", .{bytes[1]}),
        0x15 => try writer.print("ORA ${X:0>2},X", .{bytes[1]}),
        0x16 => try writer.print("ASL ${X:0>2},X", .{bytes[1]}),
        0x18 => try writer.print("CLC", .{}),
        0x19 => try writer.print("ORA ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0x1D => try writer.print("ORA ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0x1E => try writer.print("ASL ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // 20
        0x20 => try writer.print("JSR ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x21 => try writer.print("AND (${X:0>2},X)", .{bytes[1]}),
        0x24 => try writer.print("BIT ${X:0>2}", .{bytes[1]}),
        0x25 => try writer.print("AND ${X:0>2}", .{bytes[1]}),
        0x26 => try writer.print("ROL ${X:0>2}", .{bytes[1]}),
        0x28 => try writer.print("PLP", .{}),
        0x29 => try writer.print("AND #${X:0>2}", .{bytes[1]}),
        0x2A => try writer.print("ROL A", .{}),
        0x2C => try writer.print("BIT ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x2D => try writer.print("AND ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x2E => try writer.print("ROL ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // 30
        0x30 => try writer.print("BMI ${X:0>2}", .{bytes[1]}),
        0x31 => try writer.print("AND (${X:0>2}),Y", .{bytes[1]}),
        0x35 => try writer.print("AND ${X:0>2},X", .{bytes[1]}),
        0x36 => try writer.print("ROL ${X:0>2},X", .{bytes[1]}),
        0x38 => try writer.print("SEC", .{}),
        0x39 => try writer.print("AND ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0x3D => try writer.print("AND ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0x3E => try writer.print("ROL ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // 40
        0x40 => try writer.print("RTI", .{}),
        0x41 => try writer.print("EOR (${X:0>2},X)", .{bytes[1]}),
        0x45 => try writer.print("EOR ${X:0>2}", .{bytes[1]}),
        0x46 => try writer.print("LSR ${X:0>2}", .{bytes[1]}),
        0x48 => try writer.print("PHA", .{}),
        0x49 => try writer.print("EOR #${X:0>2}", .{bytes[1]}),
        0x4A => try writer.print("LSR A", .{}),
        0x4C => try writer.print("JMP ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x4D => try writer.print("EOR ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x4E => try writer.print("LSR ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // 50
        0x50 => try writer.print("BVC ${X:0>2}", .{bytes[1]}),
        0x51 => try writer.print("EOR (${X:0>2}),Y", .{bytes[1]}),
        0x55 => try writer.print("EOR ${X:0>2},X", .{bytes[1]}),
        0x56 => try writer.print("LSR ${X:0>2},X", .{bytes[1]}),
        0x58 => try writer.print("CLI", .{}),
        0x59 => try writer.print("EOR ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0x5D => try writer.print("EOR ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0x5E => try writer.print("LSR ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // 60
        0x60 => try writer.print("RTS", .{}),
        0x61 => try writer.print("ADC (${X:0>2},X)", .{bytes[1]}),
        0x65 => try writer.print("ADC ${X:0>2}", .{bytes[1]}),
        0x66 => try writer.print("ROR ${X:0>2}", .{bytes[1]}),
        0x68 => try writer.print("PLA", .{}),
        0x69 => try writer.print("ADC #${X:0>2}", .{bytes[1]}),
        0x6A => try writer.print("ROR A", .{}),
        0x6C => try writer.print("JMP (${X:0>2}{X:0>2})", .{ bytes[2], bytes[1] }),
        0x6D => try writer.print("ADC ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x6E => try writer.print("ROR ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // 70
        0x70 => try writer.print("BVS ${X:0>2}", .{bytes[1]}),
        0x71 => try writer.print("ADC (${X:0>2}),Y", .{bytes[1]}),
        0x75 => try writer.print("ADC ${X:0>2},X", .{bytes[1]}),
        0x76 => try writer.print("ROR ${X:0>2},X", .{bytes[1]}),
        0x78 => try writer.print("SEI", .{}),
        0x79 => try writer.print("ADC ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0x7D => try writer.print("ADC ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0x7E => try writer.print("ROR ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // 80
        0x81 => try writer.print("STA (${X:0>2},X)", .{bytes[1]}),
        0x84 => try writer.print("STY ${X:0>2}", .{bytes[1]}),
        0x85 => try writer.print("STA ${X:0>2}", .{bytes[1]}),
        0x86 => try writer.print("STX ${X:0>2}", .{bytes[1]}),
        0x88 => try writer.print("DEY", .{}),
        0x8A => try writer.print("TXA", .{}),
        0x8C => try writer.print("STY ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x8D => try writer.print("STA ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0x8E => try writer.print("STX ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // 90
        0x90 => try writer.print("BCC ${X:0>2}", .{bytes[1]}),
        0x91 => try writer.print("STA (${X:0>2}),Y", .{bytes[1]}),
        0x94 => try writer.print("STY ${X:0>2},X", .{bytes[1]}),
        0x95 => try writer.print("STA ${X:0>2},X", .{bytes[1]}),
        0x96 => try writer.print("STX ${X:0>2},Y", .{bytes[1]}),
        0x98 => try writer.print("TYA", .{}),
        0x99 => try writer.print("STA ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0x9A => try writer.print("TXS", .{}),
        0x9D => try writer.print("STA ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // A0
        0xA0 => try writer.print("LDY #${X:0>2}", .{bytes[1]}),
        0xA1 => try writer.print("LDA (${X:0>2},X)", .{bytes[1]}),
        0xA2 => try writer.print("LDX #${X:0>2}", .{bytes[1]}),
        0xA4 => try writer.print("LDY ${X:0>2}", .{bytes[1]}),
        0xA5 => try writer.print("LDA ${X:0>2}", .{bytes[1]}),
        0xA6 => try writer.print("LDX ${X:0>2}", .{bytes[1]}),
        0xA8 => try writer.print("TAY", .{}),
        0xA9 => try writer.print("LDA #${X:0>2}", .{bytes[1]}),
        0xAA => try writer.print("TAX", .{}),
        0xAC => try writer.print("CPY ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xAD => try writer.print("CMP ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xAE => try writer.print("DEC ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // B0
        0xB0 => try writer.print("BCS ${X:0>2}", .{bytes[1]}),
        0xB1 => try writer.print("LDA (${X:0>2}),Y", .{bytes[1]}),
        0xB4 => try writer.print("LDY ${X:0>2},X", .{bytes[1]}),
        0xB5 => try writer.print("LDA ${X:0>2},X", .{bytes[1]}),
        0xB6 => try writer.print("LDX ${X:0>2},Y", .{bytes[1]}),
        0xB8 => try writer.print("CLV", .{}),
        0xB9 => try writer.print("LDA ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0xBA => try writer.print("TSX", .{}),
        0xBC => try writer.print("LDY ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0xBD => try writer.print("LDA ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0xBE => try writer.print("LDX ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        // C0
        0xC0 => try writer.print("CPY #${X:0>2}", .{bytes[1]}),
        0xC1 => try writer.print("CMP (${X:0>2},X)", .{bytes[1]}),
        0xC4 => try writer.print("CPY ${X:0>2}", .{bytes[1]}),
        0xC5 => try writer.print("CMP ${X:0>2}", .{bytes[1]}),
        0xC6 => try writer.print("DEC ${X:0>2}", .{bytes[1]}),
        0xC8 => try writer.print("INY", .{}),
        0xC9 => try writer.print("CMP #${X:0>2}", .{bytes[1]}),
        0xCA => try writer.print("DEX", .{}),
        0xCC => try writer.print("CPY ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xCD => try writer.print("CMP ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xCE => try writer.print("DEC ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // D0
        0xD0 => try writer.print("BNE ${X:0>2}", .{bytes[1]}),
        0xD1 => try writer.print("CMP (${X:0>2}),Y", .{bytes[1]}),
        0xD5 => try writer.print("CMP ${X:0>2},X", .{bytes[1]}),
        0xD6 => try writer.print("DEC ${X:0>2},X", .{bytes[1]}),
        0xD8 => try writer.print("CLD", .{}),
        0xD9 => try writer.print("CMP ${X:0>2}{X:0>2},Y", .{ bytes[2], bytes[1] }),
        0xDD => try writer.print("CMP ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0xDE => try writer.print("DEC ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // E0
        0xE0 => try writer.print("CPX #${X:0>2}", .{bytes[1]}),
        0xE1 => try writer.print("SBC (${X:0>2},X)", .{bytes[1]}),
        0xE4 => try writer.print("CPX ${X:0>2}", .{bytes[1]}),
        0xE5 => try writer.print("SBC ${X:0>2}", .{bytes[1]}),
        0xE6 => try writer.print("INC ${X:0>2}", .{bytes[1]}),
        0xE8 => try writer.print("INX", .{}),
        0xE9 => try writer.print("SBC #${X:0>2}", .{bytes[1]}),
        0xEA => try writer.print("NOP", .{}),
        0xEC => try writer.print("CPX ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xED => try writer.print("SBC ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xEE => try writer.print("INC ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        // F0
        0xF0 => try writer.print("BEQ ${X:0>2}", .{bytes[1]}),
        0xF1 => try writer.print("SBC (${X:0>2}),Y", .{bytes[1]}),
        0xF5 => try writer.print("SBC ${X:0>2},X", .{bytes[1]}),
        0xF6 => try writer.print("INC ${X:0>2},X", .{bytes[1]}),
        0xF8 => try writer.print("SED", .{}),
        0xF9 => try writer.print("SBC ${X:0>2}{X:0>2}", .{ bytes[2], bytes[1] }),
        0xFD => try writer.print("SBC ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        0xFE => try writer.print("INC ${X:0>2}{X:0>2},X", .{ bytes[2], bytes[1] }),
        // illegal
        else => try writer.print("illegal", .{}),
    }

    return &buffer;
}

test "disassembler" {
    var bytes = [_]u8{ 0xFD, 0xFA, 0x3F };
    const disassembled = try disassemble(&bytes);
    try std.testing.expectEqualStrings("SBC $3FFA,X", disassembled);
}
